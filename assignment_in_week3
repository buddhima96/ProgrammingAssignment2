library(matlib)
##Matrix inversion is usually a costly computation 
##and there may be some benefit to caching the inverse of a matrix rather than compute it repeatedly
##(there are also alternatives to matrix inversion that we will not discuss here).
##this assignment is to write a pair of functions that cache the inverse of a matrix.
##code1
##this function creates a special "matrix" object that can cache its inverse.
##p = inverse matrix
makeCacheMatrix <- function(x = matrix()) {
  p <- NULL 
  set <- function(y){
    x <<- y
    p <<- NULL
  }
  get <- function()x
  setInverse <- function(inverse) p <<- inverse
  getInverse <- function() p 
  list(set = set, get = get, 
       setInverse = setInverse, 
       getInverse = getInverse)
  
}

##code2
##this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
  ##return a inverse of "x"
  p <- x$getInverse()
  if(!is.null(p)){
    message("getting cached data")
    return(p)
  }
  mat <- x$get()
  p <- solve(mat,...)
  x$setInverse(p)
  p
}
##example for get solution
matrix<-makeCacheMatrix(matrix(rnorm(4),2,2))
matrix$get()
matrix$getInverse()
cacheSolve(matrix)
